
spring.h2.console.enabled=true

spring.jpa.show_sql=true

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# 책에는 MySQL5InnoDBDialect로 돼있는데,
# MySQL 5.5.5부터 MyISAM 에서 InnoDB로 기본 엔진이 변경됐던 이력이 있음
# 아마 책 집필 당시 5 버전이라서 InnoDB를 명시적으로 사용하려고 했던듯

spring.jpa.properties.hibernate.dialect.storage_engine=innodb
spring.datasource.hikari.jdbc-url=jdbc:h2:mem://localhost/~/testdb;MODE=MYSQL
# 위 storage_engine과 jdbc 두 설정을 해준 이유는 아래 에러 때문
# Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException:
# Syntax error in SQL statement "CREATE TABLE POSTS
# (ID BIGINT NOT NULL AUTO_INCREMENT, AUTHOR VARCHAR(255), CONTENT TEXT NOT NULL,
# TITLE VARCHAR(500) NOT NULL, PRIMARY KEY (ID)) ENGINE=[*]INNODB"
# expected "identifier" SQL statement
# 자세한 내용은 아래 두 링크 참고
# https://github.com/jojoldu/freelec-springboot2-webservice/issues/67
# https://stackoverflow.com/a/58828931


# 관련 참고 링크

# [mysql] InnoDB, MyISAM 비교
# https://e2xist.tistory.com/732

# MySQL 8.0 FAQ: Migration
# https://dev.mysql.com/doc/refman/8.0/en/faqs-migration.html

# Oracle Blog의 'Announcing General Availability of MySQL 8.0' 번역글
# https://blog.naver.com/theswice/221321015924

# MySQL 8.0 업그레이드 전 짚어봐야할 몇 가지!
# https://stardba.net/sun/checkpoint-mysql80-upgrade/


spring.profiles.include=oauth
# 스프링 부트에서는 properties의 이름을 application-xxx.properties로 만들면 xxx라는 이름의 profile이 생성돼 이를 통해 관리할 수 있음
# 즉, profile=xxx라는 식으로 호출하면 해당 properties의 설정들을 가져올 수 있음
# 호출하는 방식은 여러 방식이 있지만 이 책에서는
# 스프링 부트의 기본 설정파일인 applicaiton.properties에서 application-oauth.properties를 포함하도록 구성


spring.session.store-type=jdbc
# 세션 저장소를 jdbc로 선택
# h2-console을 보면 세션을 위한 테이블 2개 (SPRING_SESSION, SPRING_SESSION_ATTRIBUTES)가 생성된 것을 볼 수 있음
# JPA로 인해 세션 테이블이 자동 생성되었기 때문에 별도로 해야 할 일은 없음
# 물론 지금은 스프링을 재시작하면 세션이 풀림
# 이유는 H2 기반으로 스프링이 재실행될 때 H2도 재시작되기 때문
# 이후 AWS로 배포하게 되면 AWS의 데이터베이스 서비스인 RDS를 사용하게 되니 이때부터는 세션이 풀리지 않음
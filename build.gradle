//플러그인 의존성 관리를 위한 설정.
buildscript {
    //전역 변수 설정.
    ext {
        springBootversion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootversion}")
    }
}

//자바와 스프링 부트를 사용하기 위한 필수 플러그인
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'//스프링 부트의 의존성들을 관리해주는 플러그인이라 꼭 추가해야함.

//plugins {
//    id 'java'
//}

group 'com.jsh440274.book'
version '1.0-SNAPSHOT'
//sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile('org.springframework.boot:spring-boot-starter-web')
    //compile('org.projectlombok:lombok')의 경우 롬복이 제대로 동작하지 않음
    //annotationProcessor을 통해 컴파일 수행시 어노테이션에 대한 스캔과 롬복 설정을 해줌.
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    //테스트를 진행하는 과정에서 Execution failed for task ':test'오류가 발생했다.
    //윗줄의 testRuntimeOnly를 주석처리하고 JUnit 추가.
    //자세한 내용은 좀 더 찾아봐야 할 것 같다.
    testImplementation("org.junit.vintage:junit-vintage-engine") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
    //스프링 부트 버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리해준다.
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //별도의 설치 없이 프로젝트 의존성만으로 관리할 수 있는 인메모리 관계형 데이터베이스.
    //메모리에서 실행되기 때문에 애플리케이션을 재시작 할때마다 초기화가 된다. 테스트에서 많이 쓰임.
    compile('com.h2database:h2')
    //머스테치 스타터 의존성 등록
    compile('org.springframework.boot:spring-boot-starter-mustache')
    //소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성.
    //spring-security-oauth2-client와 spring-security-oauth2-jose를 기본으로 관리함.
    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    //세션 정보를 데이터베이스에 저장할 수 있도록 의존성 등록.
    /*
    회사에서 사용하는 방식은 메모리 DB(Redis)에 세션 정보를 저장하는 형식을 취하고 있다.
    사용자가 많고, 메모리를 꺼내 쓰는 방식이 key-value방식으로 비교적 빠르다는 장점때문에.
    참고 : https://codingmania.tistory.com/18
     */
    compile('org.springframework.session:spring-session-jdbc')

    testCompile('org.springframework.security:spring-security-test')
}

test {
    useJUnitPlatform()
}